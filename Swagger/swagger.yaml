openapi: 3.0.0
info:
  title: Node Express API
  version: 1.0.0
  description: This is a simple API documented with Swagger
servers:
  - url: http://localhost:3000/
    description: Local server
paths:
  /products:
    get:
      summary: Retrieves a list of products
      description: Returns a list of products, optionally filtered by various parameters.
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter by a specific category ID
        - in: query
          name: priceRange
          schema:
            type: string
          description: Filter by a price range, e.g., "100-200"
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid parameters provided
        '500':
          description: Error retrieving products
    post:
      summary: Creates a new product
      description: Adds a new product to the database with the specified details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '500':
          description: Server error

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the product
        name:
          type: string
          description: The name of the product
        description:
          type: string
          description: A detailed description of the product
        price:
          type: number
          format: float
          description: The price of the product
        category:
          type: string
          description: The category ID to which the product belongs
        sizes:
          type: array
          items:
            type: string
          description: List of size IDs available for the product
        colors:
          type: array
          items:
            type: string
          description: List of color IDs available for the product
        collectionType:
          type: string
          description: The collection type ID to which the product belongs
    NewProduct:
      type: object
      required:
        - name
        - description
        - price
        - category
        - sizes
        - colors
        - collectionType
      properties:
        name:
          type: string
          description: The name of the product
        description:
          type: string
          description: A detailed description of the product
        price:
          type: number
          format: float
          description: The price of the product
        category:
          type: string
          description: The category ID to which the product belongs
        sizes:
          type: array
          items:
            type: string
          description: List of size IDs available for the product
        colors:
          type: array
          items:
            type: string
          description: List of color IDs available for the product
        collectionType:
          type: string
          description: The collection type ID to which the product belongs
  /categories:
    get:
      summary: List all categories
      description: Retrieve a list of all categories.
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Server error
    post:
      summary: Create a new category
      description: Add a new category to the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad request due to invalid input data
        '500':
          description: Server error
  /categories/{id}:
    get:
      summary: Get a category by ID
      description: Retrieve a single category by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the category to retrieve
      responses:
        '200':
          description: A single category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
        '500':
          description: Server error
    put:
      summary: Update a category
      description: Update an existing category's details.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated successfully
        '400':
          description: Bad request due to invalid input data
        '404':
          description: Category not found
        '500':
          description: Server error
    delete:
      summary: Delete a category
      description: Remove a category from the database.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the category to delete
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found
        '500':
          description: Server error

components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the category
        name:
          type: string
          description: The name of the category
  